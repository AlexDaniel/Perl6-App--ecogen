#! perl6

use v6;

our %ECOS     = p6c => 'git@github.com:perl6/ecosystem.git';
our $DIR      = $*HOME.child('.ecogen') andthen try { mkdir($DIR) unless $DIR.IO.d }
our $GIT_CMD  = 'git';

multi MAIN('update', :$dir = $DIR, :$repo, Bool :$quiet) {
    for %ECOS.kv -> $econame, $ecouri {
        my $edir = $dir.IO.child($econame) andthen do { mkdir($edir) unless $edir.IO.e }
        git-update-or-create($ecouri, $edir, 'META.list');
        my @githubs = $edir.child('META.list', :chomp).IO.slurp.lines;

        my @meta-files = gather for @githubs -> $project-https-url {
            my $id = do with $project-https-url.match(/^ .* \/ (.*? \/.*?) \/master\/META6?\.[json|info] $/)[0] { ~$_ } // next;
            my $meta6 = ~$project-https-url.match(/^ .* \/master\/ (META6?\.[json|info]) $/)[0];
            my $name  = ~$id.match(/^ .* \/ (.*?) $/);
            my $pdir  = $edir.child($id) andthen do { mkdir($pdir) unless $pdir.IO.e }
            my $puri  = "https://github.com/$id.git";
            git-update-or-create($puri, $pdir, $meta6, :$quiet);
            take $pdir.child($meta6);
        }

        my $projects = @meta-files.map({ try { from-json(.IO.slurp) } }).grep(*.so);

        my $projects-file = $dir.IO.child("{$econame}.json");
        my $meta-json-str = to-json($projects);
        $projects-file.IO.spurt: $meta-json-str;

        git-push-ecosystem-update($projects-file, :remote-url($repo));
    }
}

sub git-push-ecosystem-update($file, :$remote-url, :$remote = 'origin') {
    if so run $GIT_CMD, 'add', $file, :cwd($file.IO.dirname) {
        try { say run $GIT_CMD, 'commit', '-m', "'ecosystem update: {time}'", :cwd($file.IO.dirname) }
        try { say say run $GIT_CMD, 'remote', 'set-url', $remote, $remote-url }
        try { say run $GIT_CMD, 'push', $remote, 'master', :cwd($file.IO.dirname) }
    }
}

sub git-update-or-create($uri, $dir, $meta6, Bool :$quiet) {
    if $dir.child('.git').IO.e {
        try { so run $GIT_CMD, 'pull', :cwd($dir); }
    }
    else {
        try { so run $GIT_CMD, 'clone', $uri, $dir, :cwd($dir.IO.dirname) }
        try { so run $GIT_CMD, 'checkout', :cwd($dir) }
    }
}
