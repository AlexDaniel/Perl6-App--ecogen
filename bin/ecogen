our %ECOS     = p6c => 'git@github.com:perl6/ecosystem.git';
our $DIR      = $*HOME.child('.ecogen') andthen try { mkdir($DIR) unless $DIR.IO.d }
our $GIT_CMD  = 'git';

multi MAIN('update', :$dir = $DIR, :$repo, Bool :$quiet) {
    for %ECOS.kv -> $econame, $ecouri {
        say "*** Processing {$econame} [{$ecouri}]";
        say $dir.IO.child($econame);
        my $edir = $dir.IO.child($econame) andthen do { mkdir($edir) unless $edir.IO.e }
        git-update-or-create($ecouri, $edir, 'META.list', :$quiet);
        my @githubs = $edir.child('META.list', :chomp).IO.lines;

        my @meta-files = gather for @githubs -> $project-https-url {
            say "*** Processing ecosystem list item: $project-https-url";
            my $id = do with $project-https-url.match(/^ .* \/ (.*? \/.*?) \/master\/META6?\.[json|info] $/)[0] { ~$_ } // next;
            my $meta6 = ~$project-https-url.match(/^ .* \/master\/ (META6?\.[json|info]) $/)[0];
            my $name  = ~$id.match(/^ .* \/ (.*?) $/);
            my $pdir  = $edir.child($id) andthen do { mkdir($pdir) unless $pdir.IO.e }
            my $puri  = "git\@github.com:$id.git";
            git-update-or-create($puri, $pdir, $meta6, :$quiet);
            take $pdir.child($meta6);
        }

        my $projects = @meta-files.map: {from-json(.IO.slurp)}

        my $projects-file = $dir.IO.child("{$econame}.json");
        # we *could* just slurp in the text and concat with a ',' ...
        my $meta-json-str = to-json($projects);
        $projects-file.IO.spurt: $meta-json-str;
        say "[new file] {$projects-file}";

        git-push-ecosystem-update($projects-file, :$repo);
    }
}

sub git-push-ecosystem-update($file, :$repo = 'origin') {
    run $GIT_CMD, 'add', $file, :cwd($file.dirname);
    run $GIT_CMD, 'commit', '-m', "ecosystem update: {time}", :cwd($file.dirname);
    run $GIT_CMD, 'push', $repo, 'master', :cwd($file.dirname);
}

sub git-update-or-create($uri, $dir, $meta6, Bool :$quiet) {
    my $get-type = $dir.child('.git').IO.e ?? 'fetch' !! 'clone';

    my @get-cmd = $GIT_CMD, $get-type, '-n', '--depth=1';
    @get-cmd.append('--quiet') if ?$quiet;
    @get-cmd.append($uri) if $get-type eq 'clone';
    my @checkout-cmd = $GIT_CMD, 'checkout', 'HEAD', $meta6;
    @checkout-cmd.append('--quiet') if ?$quiet;

    run |@get-cmd, $dir, :cwd($dir.IO.dirname);
    run |@checkout-cmd, :cwd($dir);
}
